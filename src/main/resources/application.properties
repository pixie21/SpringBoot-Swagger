# RUN THE SERVER ON PORT 8090
server.port = 8080
# DataSource settings: set here your own configurations for the database
# connection. In this example we have "fruitdb" as database name and
# "root" as username and password.
# ---- USE LINE BELOW FOR MYSQL
#spring.datasource.url = jdbc:mysql://localhost:3308/employeedb?sessionVariables=sql_mode='NO_ENGINE_SUBSTITUTION'&jdbcCompliantTruncation=false
#spring.datasource.username = root
#spring.datasource.password = password
## Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1
## Show or not log for each sql query
#spring.jpa.show-sql = true
## Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = update
## Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
## Use spring.jpa.properties.* for Hibernate native properties (the prefix is
## stripped before adding them to the entity manager)
## The SQL dialect makes Hibernate generate better SQL for the chosen database
## ---- USE LINE BELOW FOR MYSQL
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.main.banner-mode=off
logging.level.org.springframework=ERROR

spring.jpa.hibernate.ddl-auto=update

spring.datasource.initialization-mode=always
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/employee
spring.datasource.username=postgres
spring.datasource.password=test

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true